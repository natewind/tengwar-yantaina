# Import: File > Merge Feature Info

# NOTES

# Some apps only allow non-context rules in “liga”, use “clig” for context substitution rules

# After a rule match has succeeded, no other match can occur with the first token of its middle strictly before the first token of the middle of the successful match
# EXAMPLE:
# one two => three
# one three => four
# 112 => 13 (not 4)

# BUT IT DOES WORK IN SEPARATE LOOKUPS!

# and it can only match with the first token of its middle on any token of the middle of the successful match, if the new rule comes strictly after the successfully-matching rule

# Rules are matched first in token order, only then in sequence within the file order, and beginnings and endings do not count for rule sequencing purposes; only middles count

# Can’t replace many-by-many!
# Probably use composition + decomposition for diphtongs

# DIGITS

# sub one by rtl one unrtl;
# sub two by rtl two unrtl;
# etc.
# sub unrtl rtl by .null;

languagesystem DFLT dflt;
languagesystem latn dflt;

feature liga
{
	@uppercase = [A-Z AA EE II OO UU NG];

	@lowercase =
	[
		a b calma d e formen g aha i ten k lambe malta
		numen o parma quesse ore silme tinco u vala vilya x y eleven
		aa ee ii oo uu noldo
	];

	@short_vowel = [a e i o u];
	@long_vowel = [aa ee ii oo uu];
	@vowel = [@short_vowel @long_vowel];

	lookup ToLower
	{
		sub @uppercase by @lowercase;
		sub [E0 e0] by e;
	} ToLower;

	lookup LongVowels
	{
		sub a a by aa;
		sub e e by ee;
		sub i i by ii;
		sub o o by oo;
		sub u u by uu;
	} LongVowels;

	lookup KtoC	      { sub k by calma;       } KtoC;
	lookup DecomposeX { sub x by calma silme; } DecomposeX;

	lookup SingleQ
	{
		sub quesse u by quesse;
		sub calma vilya by quesse;
	} SingleQ;

	lookup InilialNW
	{
		# Consonant + NW is impossible in Quenya
		ignore sub @vowel numen' vilya';
		sub numen' vilya' by nwalme;
	} InilialNW;

	lookup ConsonantClusters
	{
		sub aha   vilya       by hwesta;
		sub lambe d           by alda;
		sub malta b           by umbar;
		sub malta parma       by ampa;
		sub numen calma       by anca;
		sub numen d           by ando;
		sub numen g     vilya by ungwe;
		sub numen g           by anga;
		sub numen quesse      by unque;
		sub numen tinco       by anto;
		sub ore   d           by arda;
		sub silme silme       by esse;
		sub tinco aha         by sule;
	} ConsonantClusters;

	lookup ContextForms
	{
		sub aha' [lambe ore] by halla;

		# Consonant + H is impossible in Quenya
		ignore sub @vowel aha';
		sub aha' by hyarmen;

		sub ore' [@vowel ore y] by romen;

		sub [tinco parma] silme' by right_s;
		sub calma silme' by bottom_s;

		sub silme' @short_vowel by silme_nuquerna;
		sub esse' @short_vowel by esse_nuquerna;
	} ContextForms;

	lookup DoubleConsonants
	{
		sub calma   calma' by narrow_tilde;
		sub formen formen' by narrow_tilde;
		sub parma   parma' by narrow_tilde;
		sub tinco   tinco' by narrow_tilde;
		sub romen   romen' by narrow_tilde;
		sub malta   malta' by   wide_tilde;
		sub numen   numen' by   wide_tilde;
		sub lambe   lambe' by middle_tilde;
	} DoubleConsonants;

	lookup Palatization
	{
		sub [aha tinco hyarmen] y' by narrow_y;
		sub [malta numen] y' by wide_y;
		sub lambe y' by middle_y;
		sub romen y' by shifted_y;
	} Palatization;

	lookup PalatizationDefault { sub y by anna narrow_y; } PalatizationDefault;
} liga;
